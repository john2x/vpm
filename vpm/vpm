#!/usr/bin/python
import datetime
import time
import argparse
import os
import sys
import ConfigParser
import urllib
import json
import subprocess
import shutil

import util
from util import git, github
from config import *
from errors import *
VERSION = '0.0.1'

def configure(args):
    # create vpm home
    if not os.path.exists(VPM_HOME):
        os.mkdir(VPM_HOME)
    if not os.path.exists(VPM_BUILD_DIR):
        os.mkdir(VPM_BUILD_DIR)
    if not os.path.exists(VPM_INSTALLED_PLUGINS_FILE):
        with open(VPM_INSTALLED_PLUGINS_FILE, 'wb') as installed:
            installed.write('{}')
    # ask where Pathogen's bundle directory is
    pathogen_path = raw_input('Specify your Pathogen "bundle" directory (Leave blank to use ~/.vim/bundle): ')
    pathogen_path = pathogen_path.strip()
    if pathogen_path == '':
        pathogen_path = DEFAULT_PATHOGEN_PATH
    if not os.path.exists(os.path.expanduser(pathogen_path)):
        raise ValueError('pathogen_path "%s" does not exist.' % pathogen_path)

    # update config file
    cp = ConfigParser.ConfigParser()
    cp.add_section('Pathogen')
    cp.set('Pathogen', 'pathogen_path', os.path.expanduser(pathogen_path))

    git_command = git.which_git()
    cp.add_section('Git')
    cp.set('Git', 'git', git_command)
    with open(VPM_CONFIG_FILE, 'wb') as config_file:
        cp.write(config_file)

def list_installed(args):
    plugins = {}
    with open(VPM_INSTALLED_PLUGINS_FILE, 'rb') as installed:
        try:
            plugins = json.load(installed)
        except ValueError:
            return
    for name, plugin_info in plugins.items():
        print '%s (%s)' % (name, plugin_info[1])

def search(args):
    result = github.search_vim_scripts(args.plugin_name)
    if not result:
        print args.plugin_name + ' not found'
        return
    print '%s - %s (%s)' % result

def install(args):
    result = github.search_vim_scripts(args.plugin_name)
    if not result:
        print args.plugin_name + ' not found'
        return
    clone_url = result[2]
    # check if plugin isn't already installed
    if util.is_installed(args.plugin_name):
        print "%s already installed. Run 'vpm update %s' to update instead." % (
            args.plugin_name, args.plugin_name)
        return
    print 'Installing %s...' % args.plugin_name
    try:
        clone_path = git.clone(clone_url, args.plugin_name)
        install_path = os.path.join(util.bundle_path(), args.plugin_name)
        shutil.copytree(clone_path, install_path)
        util.update_installed_list(
            args.plugin_name, clone_url, install_path)
    except Exception, e:
        raise e
    else:
        print 'Successfully installed %s.' % args.plugin_name
    finally:
        util.cleanup_build_dir()

def update(args):
    # check if plugin is installed
    if not util.is_installed(args.plugin_name):
        print "%s not installed. Run 'vpm install %s' to install." % (
            args.plugin_name, args.plugin_name)
        return
    _, clone_url, install_path = util.get_installed(args.plugin_name)
    # clone repo
    print 'Updating %s...' % args.plugin_name
    backup = os.path.join(VPM_BUILD_DIR, '.backup')
    install_path = os.path.join(util.bundle_path(), args.plugin_name)
    try:
        clone_path = git.clone(clone_url, args.plugin_name)
        shutil.copytree(install_path, backup)  # create backup
        shutil.rmtree(install_path, True)  # remove existing files
        shutil.copytree(clone_path, install_path)
        util.update_installed_list(
            args.plugin_name, clone_url, install_path)
    except Exception, e:
        print e
        print 'Attempting to recover from failure...'
        shutil.rmtree(install_path, True)
        shutil.copytree(backup, install_path)
    else:
        print 'Successfully updated %s.' % args.plugin_name
    finally:
        util.cleanup_build_dir()

def uninstall(args):
    if not util.is_installed(args.plugin_name):
        print "%s not installed. " % (
            args.plugin_name, args.plugin_name)
        return
    print 'Uninstalling %s...' % args.plugin_name
    install_path = os.path.join(util.bundle_path(), args.plugin_name)
    shutil.rmtree(install_path, True)
    util.cleanup_installed_list(args.plugin_name)
    print 'Successfully removed %s.' % args.plugin_name

p = argparse.ArgumentParser(description='Vim Plugin Manager (ALPHA)')
p.add_argument('--version', action='version', version='%(prog)s ' + VERSION)
sp = p.add_subparsers()

config_p = sp.add_parser('configure')
config_p.set_defaults(func=configure)

list_installed_p = sp.add_parser('list-installed')
list_installed_p.set_defaults(func=list_installed)

search_p = sp.add_parser('search')
search_p.add_argument('plugin_name')
search_p.set_defaults(func=search)

install_p = sp.add_parser('install')
install_p.add_argument('plugin_name')
install_p.set_defaults(func=install)

install_p = sp.add_parser('update')
install_p.add_argument('plugin_name')
install_p.set_defaults(func=update)

install_p = sp.add_parser('uninstall')
install_p.add_argument('plugin_name')
install_p.set_defaults(func=uninstall)

if __name__ == '__main__':
    args = p.parse_args()
    args.func(args)

